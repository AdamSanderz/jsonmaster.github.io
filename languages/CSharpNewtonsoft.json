{
    "modelStart": "{\n",
    "reservedKeywords": [
        "abstract",
        "as",
        "base",
        "bool",
        "break",
        "byte",
        "case",
        "catch",
        "char",
        "checked",
        "class",
        "const",
        "continue",
        "decimal",
        "default",
        "delegate",
        "do",
        "double",
        "else",
        "enum",
        "event",
        "explicit",
        "extern",
        "false",
        "finally",
        "fixed",
        "float",
        "for",
        "foreach",
        "goto",
        "if",
        "implicit",
        "in",
        "int",
        "interface",
        "internal",
        "is",
        "lock",
        "long",
        "namespace",
        "new",
        "null",
        "object",
        "operator",
        "out",
        "override",
        "params",
        "private",
        "protected",
        "public",
        "readonly",
        "ref",
        "return",
        "sbyte",
        "sealed",
        "short",
        "sizeof",
        "stackalloc",
        "static",
        "string",
        "struct",
        "switch",
        "this",
        "throw",
        "true",
        "try",
        "typeof",
        "uint",
        "ulong",
        "unchecked",
        "unsafe",
        "ushort",
        "using",
        "virtual",
        "void",
        "volatile",
        "while"
    ],

    "dataTypes": {
        "arrayType": "IList<<!ElementType!>>",
        "generic": "object",
        "string": "string",
        "boolean": "bool",
        "float": "double",
        "doubleType": "double",
        "characterType": "char",
        "longType": "long",
        "int": "int"
    },

    "modelDefinition": "\npublic class <!ModelName!> ",
    "fileExtension": "cs",
    "instanceVarDefinition": "\n\t[JsonProperty(\"<!JsonKeyName!>\")]\n\tpublic <!VarType!> <!VarName!> { get; set; }\n",
    "modelEnd": "\n}",
    "staticImports": "using System;\nusing System.Collections.Generic;\n\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;",
    "supportsCamelcasing": true,
    "methods": {
    },
    "exampleCode": "## Example\n\n\n#### Decoding:\nThe example below shows how to decode an instance of `<!RootClassName>` type from JSON object.\n\n```csharp\nstring json = \"...\"; // Your JSON String.\n\n<!RootClassName> model = JsonConvert.DeserializeObject<<!RootClassName>>(json);\n```\n\n\n#### Encoding: \nThe example below shows how to encode an instance of a simple `<!RootClassName>` type into a JSON object.\n\n```java\n<!RootClassName> model = new <!RootClassName>();\n// Assign value to variables.\n\nstring json = JsonConvert.SerializeObject(model);\n```"
}