{
    "modelStart": "{\n",
    "reservedKeywords": [
        "abstract",
        "assert",
        "boolean",
        "break",
        "byte",
        "case",
        "catch",
        "char",
        "class",
        "const",
        "continue",
        "default",
        "do",
        "double",
        "else",
        "enum",
        "extends",
        "false",
        "final",
        "finally",
        "float",
        "for",
        "goto",
        "if",
        "implements",
        "import",
        "instanceof",
        "int",
        "interface",
        "long",
        "native",
        "new",
        "null",
        "package",
        "private",
        "protected",
        "public",
        "return",
        "short",
        "static",
        "strictfp",
        "super",
        "switch",
        "synchronized",
        "this",
        "throw",
        "throws",
        "transient",
        "true",
        "try",
        "void",
        "volatile",
        "while",
        "class",
        "description"
    ],

    "dataTypes": {
        "arrayType": "[<!ElementType!>]",
        "generic": "Any",
        "string": "String",
        "boolean": "Bool",
        "float": "Double",
        "doubleType": "Double",
        "characterType": "Character",
        "longType": "Double",
        "int": "Int"
    },

    "modelDefinition": "\n<!ModelIdentifier!> <!ModelName!>: Codable ",
    "getter": "",
    "setter": "",
    "fileExtension": "swift",
    "instanceVarDefinition": "\tlet <!VarName!>: <!VarType!>?\n",
    "modelEnd": "\n}",
    "staticImports": "import Foundation",
    "supportsCamelcasing": true,
    "methods": {
        "constructorName": "Initializer",
        "constructorChecked": "checked",
        "constructors": [{
            "signature": "\tenum CodingKeys: String, CodingKey ",
            "bodyStart": "{\n",
            "bodyEnd": "\t}\n",
            "codeForEachProperty": "\t\tcase <!VarName!> = \"<!JsonKeyName!>\"\n",
            "comment": ""
        },{            
            "signature": "\tinit(from decoder: Decoder) throws ",
            "bodyStart": "{\n\t\tlet values = try decoder.container(keyedBy: CodingKeys.self)\n",                     
            "bodyEnd": "\t}\n",
            "codeForEachProperty": "\t\t<!VarName!> = try values.decodeIfPresent(<!VarType!>.self, forKey: .<!VarName!>)\n",
            "comment": ""
        }],
        "others": {
            "encoder": {
                "name": "Encoding",
                "signature": "\tfunc encode(to encoder: Encoder) throws ",
                "bodyStart": "{\n\t\tvar container = encoder.container(keyedBy: CodingKeys.self)\n",                     
                "bodyEnd": "\t}\n",
                "codeForEachProperty": "\t\ttry container.encodeIfPresent(<!VarName!>, forKey: .<!VarName!>)\n",
                "comment": "",
                "checked": "checked"
            }
        }
    }
}