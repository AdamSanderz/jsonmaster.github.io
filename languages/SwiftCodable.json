{
    "modelStart": "{\n",
    "reservedKeywords": [
        "associatedtype", 
        "class", 
        "deinit", 
        "enum", 
        "extension", 
        "fileprivate", 
        "func", 
        "import", 
        "init", 
        "inout", 
        "internal", 
        "let", 
        "open", 
        "operator", 
        "private", 
        "protocol", 
        "public", 
        "static", 
        "struct", 
        "subscript", 
        "typealias", 
        "var",
        "break", 
        "case", 
        "continue", 
        "default", 
        "defer", 
        "do", 
        "else", 
        "fallthrough", 
        "for", 
        "guard", 
        "if", 
        "in", 
        "repeat", 
        "return", 
        "switch", 
        "where", 
        "while",
        "as", 
        "Any", 
        "catch", 
        "false", 
        "is", 
        "nil", 
        "rethrows", 
        "super", 
        "self", 
        "Self", 
        "throw", 
        "throws", 
        "true", 
        "try",
        "associativity", 
        "convenience", 
        "dynamic", 
        "didSet", 
        "final", 
        "get", 
        "infix", 
        "indirect", 
        "lazy", 
        "left", 
        "mutating", 
        "none", 
        "nonmutating", 
        "optional", 
        "override", 
        "postfix", 
        "precedence", 
        "prefix", 
        "Protocol", 
        "required", 
        "right", 
        "set", 
        "Type", 
        "unowned", 
        "weak", 
        "willSet"
    ],

    "dataTypes": {
        "arrayType": "[<!ElementType!>]",
        "generic": "Any",
        "string": "String",
        "boolean": "Bool",
        "float": "Double",
        "doubleType": "Double",
        "characterType": "Character",
        "longType": "Double",
        "int": "Int"
    },

    "modelDefinition": "\n<!ModelIdentifier!> <!ModelName!>: Codable ",
    "getter": "",
    "setter": "",
    "fileExtension": "swift",
    "instanceVarDefinition": "\tlet <!VarName!>: <!VarType!>?\n",
    "modelEnd": "\n}",
    "staticImports": "import Foundation",
    "supportsCamelcasing": true,
    "methods": {
        "constructorName": "Initializer",
        "constructorChecked": "checked",
        "constructors": [{
            "signature": "\tprivate enum CodingKeys: String, CodingKey ",
            "bodyStart": "{\n",
            "bodyEnd": "\t}\n",
            "codeForEachProperty": "\t\tcase <!VarName!> = \"<!JsonKeyName!>\"\n",
            "comment": ""
        },{            
            "signature": "\tinit(from decoder: Decoder) throws ",
            "bodyStart": "{\n\t\tlet values = try decoder.container(keyedBy: CodingKeys.self)\n",                     
            "bodyEnd": "\t}\n",
            "codeForEachProperty": "\t\t<!VarName!> = try values.decodeIfPresent(<!VarType!>.self, forKey: .<!VarName!>)\n",
            "comment": ""
        }],
        "others": {
            "encoder": {
                "name": "Encoding",
                "signature": "\tfunc encode(to encoder: Encoder) throws ",
                "bodyStart": "{\n\t\tvar container = encoder.container(keyedBy: CodingKeys.self)\n",                     
                "bodyEnd": "\t}\n",
                "codeForEachProperty": "\t\ttry container.encodeIfPresent(<!VarName!>, forKey: .<!VarName!>)\n",
                "comment": "",
                "checked": "checked"
            }
        }
    }
}