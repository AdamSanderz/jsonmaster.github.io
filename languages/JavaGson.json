{
    "modelStart": "{\n",
    "reservedKeywords": [
        "abstract",
        "continue",
        "for",
        "new",
        "null",
        "switch",
        "assert",
        "default",
        "if",
        "package",
        "synchronized",
        "boolean",
        "do",
        "goto",
        "private",
        "this",
        "break",
        "double",
        "implements",
        "protected",
        "throw",
        "byte",
        "else",
        "import",
        "public",
        "throws",
        "case",
        "enum",
        "instanceof",
        "return",
        "transient",
        "catch",
        "extends",
        "int",
        "short",
        "try",
        "char",
        "final",
        "interface",
        "static",
        "void",
        "class",
        "finally",
        "long",
        "strictfp",
        "volatile",
        "const",
        "float",
        "native",
        "super",
        "while"
    ],

    "dataTypes": {
        "arrayType": "<!ElementType!>[]",
        "generic": "Object",
        "string": "String",
        "boolean": "boolean",
        "float": "double",
        "doubleType": "double",
        "characterType": "char",
        "longType": "long",
        "int": "int"
    },

    "typesWithCustomFetchMethod": [
        "String",
        "Object"
    ],

    "customFetchTypeReplacement": [
        "",
        ""
    ],

    "modelDefinition": "\npublic class <!ModelName!> ",
    "fileExtension": "java",
    "instanceVarDefinition": "\t@SerializedName(\"<!JsonKeyName!>\")\n\tprivate <!VarType!> <!VarName!>;\n",
    "modelEnd": "\n}",
    "staticImports": "\nimport java.util.*;\nimport com.google.gson.annotations.SerializedName;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;",
    "supportsCamelcasing": true,
    "methods": {
        "others": {
            "getterSetter": {
                "name": "Getter Setter",
                "signature": "",
                "bodyStart": "",                     
                "bodyEnd": "",
                "codeForEachProperty": "\tpublic void set<!CapitalizedVarName!>(<!VarType!> <!VarName!>) {\n\t\tthis.<!VarName!> = <!VarName!>;\n\t}\n\n\tpublic <!VarType!> get<!CapitalizedVarName!>() {\n\t\treturn this.<!VarName!>;\n\t}\n\n",
                "comment": "",
                "checked": "checked"
            },
            "construction": {
                "name": "Create Utility",
                "signature": "\tpublic static <!ModelName!> create(String json) ",
                "bodyStart": "{\n\t\tGson gson = new GsonBuilder().create();\n",
                "bodyEnd": "\t\treturn gson.fromJson(json, <!ModelName!>.class);\n\t}\n",
                "codeForEachProperty": "",
                "comment": "",
                "checked": "checked"
            },
            "toString": {
                "name": "toString",
                "signature": "\tpublic String toString() ",
                "bodyStart": "{\n\t\tGson gson = new GsonBuilder().create();\n",
                "bodyEnd": "\t\treturn gson.toJson(this);\n\t}\n",
                "codeForEachProperty": "",
                "comment": "",
                "checked": "checked"
            }
        }
    },
    "exampleCode": "## Example\n\n\n#### Decoding:\nThe example below shows how to decode an instance of `<!RootClassName>` type from JSON object.\n\n```java\nString json = \"...\"; // Your JSON String.\n\nGsonBuilder builder = new GsonBuilder();\nGson gson = builder.create();\n<!RootClassName> model = gson.fromJson(json, <!RootClassName>.class);\n```\n\n\n#### Encoding: \nThe example below shows how to encode an instance of a simple `<!RootClassName>` type into a JSON object.\n\n```java\n<!RootClassName> model = new <!RootClassName>();\n// Assign value to variables.\n\nGsonBuilder builder = new GsonBuilder();\nGson gson = builder.create();\nSystem.out.println(gson.toJson(model));\n```"
}